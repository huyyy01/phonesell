@inject IProductService ProductService
@implements IDisposable

<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
       
        <li class=" my-3">
            <a>
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.Image" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>

                   <div style="padding-top:10px;">
                       <h6 class="price text-muted original-price">
                        @GetOriginalPriceText(product)
                        </h6>
                       <h5 class="price">
                        @GetPriceText(product)
                        </h5>
                   </div>
                
                </div>
            </a>
        </li>
    }
</ul>

@code {

    protected override void OnInitialized()
    {
        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
       return $"${variants[0].Price}";
    }
    private string GetOriginalPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].OriginalPrice}";
        }
       return $"${variants[0].OriginalPrice}";
    }
}